<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Blocks and Beyond Workshop</title>
    <link href="blocks-and-beyond.css" rel="stylesheet">
  </head>
  <body>

<!--#include virtual="header.part" -->

<main>

<div id="dates">
 
  <div id="datesTitle">Important Dates:</div>

  <div class="dayentry">
    <s><span class="day">24 Jul. 2015:</span></s> 
    <s><span class="dayItem">Submissions due.</span></s>
  </div>

  <div class="dayentry">
    <span class="day">27 Jul. 2015:</span>
    <span class="dayItem">Submissions due. (deadline extended; 
    due by end of day, anytime on Earth)</span>
  </div>

  <div class="dayentry">
    <span class="day">14 Aug. 2015:</span> 
    <span class="dayItem">Author notification.</span>
  </div>

  <div class="dayentry">
    <span class="day">4 Sep. 2015:</span> 
    <span class="dayItem">Camera ready copies due.</span>

  </div>

  <div class="dayentry">
    <span class="day">22 Oct. 2015:</span> 
    <span class="dayItem">Workshop in Atlanta.</span>
  </div>

  <div class="dayentry">
    <span class="day">23 Oct. 2015:</span> 
    <span class="dayItem">Extra day for blocks language developers, researchers, and teachers to interact.</span>
  </div>

</div>

<div id="submission">
<h2>Submission</h2>

<p> We invite two kinds of submissions: 

  <ol>

    <li> A 1 to 3 page position statement describing an idea or research
    question related to the design, teaching, or study of blocks programming
    environments.
 
    <li> A paper (up to 6 pages) describing previously unpublished results
    involving the design, study, or pedagogy of blocks programming
    environments.

  </ol>

<p> All submissions must be made as PDF files to the
<a href="https://easychair.org/conferences/?conf=blocksbeyond2015">
Easy Chair Blocks and Beyond workshop submission site<a>.

<p>Although we do not require a particular formatting template for the first round
of submissions, we recommend using one of the 
<a href="http://www.ieee.org/conferences_events/conferences/publishing/templates.html">IEEE Conference templates</a>.

<p> Submissions need not be anonymized, but you may anonymize them
if you wish.


<p> Because this workshop will be discussion-based, rather than a
mini-conference, the number of presentation/demonstration slots are
limited. Authors for whom presentation or demonstration is essential 
should indicate this in their submission.
</div>

<h1>Call for Participation</h1>

<h2>Scope and Goals</h2>

<p>
Blocks programming environments represent program syntax trees as
compositions of visual blocks. This family of tools includes Scratch, Blockly,
Code.org's lessons, App Inventor, Snap!, Pencil Code, Alice/Looking
Glass, AgentSheets/AgentCubes, etc. They have introduced programming and computational
thinking to tens of millions, reaching people of all ages and
backgrounds.

<p>Despite their popularity, there has been remarkably little research on the
usability, effectiveness, or generalizability of affordances from these
environments. The goal of this workshop is to begin to distill testable
hypotheses from the existing folk knowledge of blocks-based programming
environments and identify research questions and partnerships that can
legitimize, or discount, pieces of this knowledge. The workshop will bring
together educators and researchers with experience in blocks languages, as
well as members of the broader VL/HCC community who wish to examine this area
more deeply. We seek participants with diverse expertise, including, but not
limited to: design of programming environments, instruction with these
environments, the learning sciences, data analytics, usability, and more.

<p> The workshop will be a generative discussion that sets the stage for
future work and collaboration. It will include participant presentations and
demonstrations that frame the discussion, followed by reflection on the state
of the field and smaller working-group discussion and brainstorming sessions.

<h2>Suggested Topics for Discussion</h2>

  <ul>

    <li>Who uses blocks programming environments and why? What do they create
    in these environments, and how satisfied are they with their creations?

    <li> Which features of blocks environments help or hinder users?
    <!-- creating  personally meaningful projects or learning computational concepts -->  
    How do we know? Which of these features are worth incorporating into more traditional
    IDEs?  What helpful features are missing?

    <li> How can blocks environments and associated curricular materials be made more accessible to everyone, 
    especially those with disabilities?

    <li> Can blocks programming appeal to a wider range of interests (e.g., by allowing connections to
    different types of devices, web services, data sources, etc.)?

    <li>What are the best ways to introduce programming to novices and to
    support their progression towards mastery? Do these approaches differ for
    for learners of computing basics and for makers? 

    <li>What are the conceptual and practical hurdles encountered by novice
    users of blocks languages when they face the transition to text languages
    and traditional programming communities? What can be done to reduce these
    hurdles?

    <li>How can we best harness online communities to support growth through
    teaching, motivating, and providing inspiration and feedback?

    <li> What roles should collaboration play in blocks programming? How can environments support that collaboration? 
    <!--What kinds of roles should collaboration play in blocks environments?
    What problems should we attempt to address using collaboration and what
    kinds of communication are necessary? How can environments support that
    collaboration most easily? Is real-time co-editing of code really a
    desirable end-state, or is there another model that we should seek to
    support?-->

    <li>In these environments, what data can be collected, and how can that
    data be analyzed to determine answers to questions like those above?  How
    can we use data to answer larger scale questions about early experiences
    with programming?

    <li>What are the lessons learned (both positive and negative) from
    creating first programming environments that can be shared with future
    environment designers?

   </ul>

</main>

<!--#include virtual="footer.part" -->

  </body>
</html>

